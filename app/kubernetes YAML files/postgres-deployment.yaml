apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: app-infrastructure
type: Opaque
stringData:
  POSTGRES_PASSWORD: sarvam_litmus_test
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: app-infrastructure
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS users (
        user_id SERIAL PRIMARY KEY,
        username VARCHAR(255) NOT NULL UNIQUE,
        email VARCHAR(255) NOT NULL UNIQUE,
        password_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        last_login TIMESTAMP WITH TIME ZONE
    );

    CREATE TABLE IF NOT EXISTS chat_sessions (
        session_id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
        title VARCHAR(255),
        model_name VARCHAR(100) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE
    );

    CREATE TABLE IF NOT EXISTS messages (
        message_id SERIAL PRIMARY KEY,
        session_id INTEGER NOT NULL REFERENCES chat_sessions(session_id) ON DELETE CASCADE,
        role VARCHAR(50) NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
        content TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        has_attachments BOOLEAN DEFAULT FALSE
    );

    CREATE TABLE IF NOT EXISTS message_attachments (
        attachment_id SERIAL PRIMARY KEY,
        message_id INTEGER NOT NULL REFERENCES messages(message_id) ON DELETE CASCADE,
        file_name VARCHAR(255) NOT NULL,
        file_type VARCHAR(100) NOT NULL,
        file_path VARCHAR(500) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: app-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres-db
          image: postgres
          resources:
            limits:
              memory: "4Gi"
              cpu: "4"
          env:
            - name: POSTGRES_DB
              value: yourappdb
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: init-script-volume
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgres-storage
          hostPath:
            path: /home/arav/Desktop/Scalable-Chatbot/data/postgres-data
            type: DirectoryOrCreate
        - name: init-script-volume
          configMap:
            name: postgres-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: app-infrastructure
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-external
  namespace: app-infrastructure
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 30432
  type: NodePort
